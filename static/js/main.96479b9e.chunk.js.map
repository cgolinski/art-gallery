{"version":3,"sources":["components/Loading.component.tsx","components/Error.component.tsx","components/ArtworkText.component.tsx","components/ArtworkDetail.component.tsx","components/ArtistSubheader.component.tsx","components/ArtworkTile.component.tsx","components/GallerySection.component.tsx","components/Gallery.component.tsx","components/Search.component.tsx","components/Dashboard.component.tsx","components/AppHeader.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","className","role","aria-label","Error","errorMessage","console","error","ArtworkText","artworkDetail","style","maxWidth","title","artist_names","date","category","medium","dimensions","in","collecting_institution","description","GET_ARTWORK_DETAIL","gql","ArtworkDetail","artworkId","useParams","useQuery","variables","id","loading","data","artwork","message","src","images","url","alt","ArtistSubheader","name","birthday","deathday","ArtworkTile","artworkTile","to","GallerySection","artworks","map","key","Gallery","displayedArtists","length","Search","setSearchValue","searchValue","onSubmit","event","preventDefault","htmlFor","type","value","onChange","target","GET_TRENDING_ARTISTS","Dashboard","React","trending_artists","artists","filter","toLowerCase","includes","Header","AppHeader","pathname","useLocation","App","exact","from","path","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.96479b9e.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Loading.component.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <div className=\"wrapper\">\n    <div className=\"loading-spinner\">\n      <span role=\"img\" aria-label=\"loading-spinner\">\n        ðŸŽ¨\n      </span>\n    </div>\n  </div>\n);\n","import * as React from 'react';\n\ntype ErrorProps = {\n  errorMessage?: string;\n};\nexport const Error: React.FunctionComponent<ErrorProps> = ({\n  errorMessage = 'Error: unknown',\n}) => (\n  <div>\n    <p className=\"f3 dark-grey\">\n      In art, an \"oops\" can be beautiful. In your browser, an \"oops\" is just an\n      \"oops\". Try refreshing your browser.\n    </p>\n    <p>{errorMessage}</p>\n    {console.error('Error: ', errorMessage)}\n  </div>\n);\n","import * as React from 'react';\nimport { ArtworkDetail } from '../types/data.types';\n\ntype ArtworkTextProps = {\n  artworkDetail: ArtworkDetail;\n};\n\nexport const ArtworkText: React.FunctionComponent<ArtworkTextProps> = ({\n  artworkDetail,\n}: ArtworkTextProps) => (\n  <div\n    className=\"fl w-100 w-40-l tl f4 lh-copy pv3 ph3\"\n    style={{ maxWidth: 'fit-content' }}\n  >\n    <div>\n      <h3>{artworkDetail?.title}</h3>\n      <div className=\"fw6 f4\">{artworkDetail?.artist_names}</div>\n      <div className=\"fw5 f4\">{artworkDetail?.date}</div>\n    </div>\n\n    <p>\n      {artworkDetail?.category\n        ? `${artworkDetail?.category}. ${artworkDetail?.medium}`\n        : artworkDetail?.medium}\n    </p>\n\n    <p>{artworkDetail?.dimensions.in}</p>\n\n    {artworkDetail?.collecting_institution && (\n      <p>Collector: {artworkDetail?.collecting_institution}</p>\n    )}\n\n    <p>{artworkDetail?.description}</p>\n  </div>\n);\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GetArtworkDetailData } from '../types/data.types';\nimport { Loading } from './Loading.component';\nimport { Error } from './Error.component';\nimport './ArtworkTile.component.css';\nimport { ArtworkText } from './ArtworkText.component';\n\nconst GET_ARTWORK_DETAIL = gql`\n  query getArtworkDetail($id: String!) {\n    artwork(id: $id) {\n      id\n      artist_names\n      category\n      collecting_institution\n      date\n      description\n      dimensions {\n        in\n      }\n      images {\n        url(version: \"large\")\n      }\n      medium\n      title\n    }\n  }\n`;\n\nexport const ArtworkDetail: React.FunctionComponent = () => {\n  const { artworkId } = useParams();\n\n  const { loading, error, data } = useQuery<GetArtworkDetailData>(\n    GET_ARTWORK_DETAIL,\n    { variables: { id: artworkId } }\n  );\n\n  const artworkDetail = data?.artwork;\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (error) {\n    return <Error errorMessage={error?.message} />;\n  }\n\n  return (\n    <div className=\"pa4\">\n      <div className=\"fl w-100 w-60-l tc\">\n        <div className=\"mw-100 picture-frame\">\n          <img\n            src={artworkDetail?.images[0].url}\n            alt={`artwork: ${artworkDetail?.title}.`}\n            className=\"dib\"\n          />\n        </div>\n      </div>\n      {artworkDetail && <ArtworkText artworkDetail={artworkDetail} />}\n    </div>\n  );\n};\n","import * as React from 'react';\n\ntype ArtistSubheaderProps = {\n  name: string;\n  birthday: string;\n  deathday: string;\n};\n\nexport const ArtistSubheader: React.FunctionComponent<ArtistSubheaderProps> = ({\n  name,\n  birthday,\n  deathday,\n}: ArtistSubheaderProps) => (\n  <>\n    <h2 className=\"db b mb0 pt6 f1 tl mv0 mh5 tracked-tight\">{name}</h2>\n    <div className=\"tl mb0 mt2 mh5 f4\">\n      {deathday ? `${birthday}â€“${deathday}` : birthday}\n    </div>\n  </>\n);\n","import * as React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './ArtworkTile.component.css';\nimport type { ArtworkTileType } from '../types/data.types';\n\ntype ArtworkTileProps = {\n  artworkTile: ArtworkTileType;\n};\n\nexport const ArtworkTile: React.FunctionComponent<ArtworkTileProps> = ({\n  artworkTile,\n}: ArtworkTileProps) => {\n  return (\n    <NavLink\n      to={`/art-gallery/artwork/${artworkTile.id}`}\n      className=\"artwork-link\"\n    >\n      <div className=\"ma4 pointer picture-frame artwork-tile\">\n        <img src={artworkTile.images[0].url} alt=\"artwork\" />\n      </div>\n    </NavLink>\n  );\n};\n","import * as React from 'react';\nimport type { ArtworkTileType, ArtworkTilesType } from '../types/data.types';\nimport { ArtistSubheader } from './ArtistSubheader.component';\nimport { ArtworkTile } from './ArtworkTile.component';\n\ntype GallerySectionProps = {\n  name: string;\n  birthday: string;\n  deathday: string;\n  artworks: ArtworkTilesType;\n};\n\nexport const GallerySection: React.FunctionComponent<GallerySectionProps> = ({\n  name,\n  birthday,\n  deathday,\n  artworks,\n}: GallerySectionProps) => (\n  <>\n    <ArtistSubheader name={name} birthday={birthday} deathday={deathday} />\n    <div className=\"flex justify-around flex-wrap\">\n      {artworks.map((artwork: ArtworkTileType) => (\n        <ArtworkTile key={artwork.id} artworkTile={artwork} />\n      ))}\n    </div>\n  </>\n);\n","import * as React from 'react';\nimport { ApolloError } from 'apollo-boost';\nimport type { Artist } from '../types/data.types';\nimport { Error } from './Error.component';\nimport { Loading } from './Loading.component';\nimport { GallerySection } from './GallerySection.component';\n\ntype GalleryProps = {\n  displayedArtists: Artist[];\n  loading: boolean;\n  error?: ApolloError;\n};\n\nexport const Gallery: React.FunctionComponent<GalleryProps> = ({\n  displayedArtists,\n  loading,\n  error,\n}: GalleryProps) => {\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (error) {\n    return <Error errorMessage={error?.message} />;\n  }\n  return (\n    <div>\n      {!displayedArtists.length && 'No results found'}\n      {displayedArtists.map(\n        ({ id, name, birthday, deathday, artworks }: Artist) => (\n          <GallerySection\n            key={id}\n            name={name}\n            birthday={birthday}\n            deathday={deathday}\n            artworks={artworks}\n          />\n        )\n      )}\n    </div>\n  );\n};\n","import * as React from 'react';\n\nexport type SearchProps = {\n  setSearchValue: (key: string) => void;\n  searchValue: string;\n};\n\nexport const Search: React.FunctionComponent<SearchProps> = ({\n  setSearchValue,\n  searchValue,\n}: SearchProps) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className=\"db pr2\" htmlFor=\"search-input\">\n        Search by artist\n      </label>\n      <input\n        className=\"f4 ba br2 pa2 mv2\"\n        type=\"search\"\n        id=\"search-input\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n    </form>\n  );\n};\n","import * as React from 'react';\nimport { Gallery } from './Gallery.component';\nimport { Search } from './Search.component';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GetTrendingArtistsData } from '../types/data.types';\n\nconst GET_TRENDING_ARTISTS = gql`\n  {\n    trending_artists(name: ARTIST_FOLLOW) {\n      artists {\n        id\n        name\n        birthday\n        deathday\n        artworks {\n          id\n          images {\n            url(version: \"square\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const Dashboard: React.FunctionComponent = () => {\n  const { loading, error, data } = useQuery<GetTrendingArtistsData>(\n    GET_TRENDING_ARTISTS\n  );\n\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const trendingArtistsData: GetTrendingArtistsData = data || {\n    trending_artists: { artists: [] },\n  };\n\n  const displayedArtists = trendingArtistsData.trending_artists.artists.filter(\n    ({ name }) => name.toLowerCase().includes(searchValue.toLowerCase())\n  );\n\n  return (\n    <div className=\"pa3\">\n      <div className=\"tc pt4\">\n        <Search setSearchValue={setSearchValue} searchValue={searchValue} />\n      </div>\n      <Gallery\n        loading={loading}\n        error={error}\n        displayedArtists={displayedArtists}\n      />\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\n\nconst Header: React.FunctionComponent = () => (\n  <h1 className=\"tc\">Gallery of Popular Artists</h1>\n);\n\nexport const AppHeader: React.FunctionComponent = () => {\n  const { pathname } = useLocation();\n\n  return (\n    <div className=\"bg-dark-gray white pa3\">\n      {pathname === '/art-gallery' ? (\n        <Header />\n      ) : (\n        <NavLink className=\"link white hover-moon-gray\" to=\"/art-gallery\">\n          <Header />\n        </NavLink>\n      )}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { ArtworkDetail } from './components/ArtworkDetail.component';\nimport { Dashboard } from './components/Dashboard.component';\nimport { AppHeader } from './components/AppHeader.component';\n\nconst App: React.FunctionComponent = () => {\n  return (\n    <Router>\n      <AppHeader />\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/art-gallery\" />\n        <Route path=\"/art-gallery/artwork/:artworkId\">\n          <ArtworkDetail />\n        </Route>\n        <Route path=\"/art-gallery\">\n          <Dashboard />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// @ts-nocheck\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst client = new ApolloClient({\n  uri: 'https://metaphysics-staging.artsy.net',\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}